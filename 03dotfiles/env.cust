#################################
# SYSTEM
#################################
# -c: max core file size
ulimit -c unlimited

# umask color to prevent green BG on dir name
if [[ "$(umask)" == '000' ]]
then
    umask 022
fi


#################################
# SHELL VAR
#################################

#################################
# PROMPT STYLE
#################################
# ls command - color configuration
export CLICOLOR=1
export LS_COLORS="di=1;36:ln=35:so=32:pi=33:ex=31:bd=34;46:cd=34;43:su=0;41:sg=30;46:tw=0;42:ow=30;43"
export LSCOLORS="Gxfxcxdxbxegedxbagxcad"
export TIME_STYLE='long-iso'


#################################
# ANSI ESCAPE CODE for FONT EFFECT
#################################
# echo color message:: (recommended) all-round
# support all type shell: sh bash zsh
# available tool: echo sed
# echo ${TPTRED}----------------------------------
# echo ${TPTRED}warning${TPTNORM}: something wrong
# echo ${TPTRED}----------------------------------
# echo 123GREEN123 | sed -u -e "s/\(GREEN\)/${TPTGREEN}\1${TPTNORM}/gi"
export TPTNORM=$(tput sgr0)
export TPTDBLACK=$(tput setaf 0)
export TPTDRED=$(tput setaf 1)
export TPTDGREEN=$(tput setaf 2)
export TPTDYELLOW=$(tput setaf 3)
export TPTDBLUE=$(tput setaf 4)
export TPTDPURPLE=$(tput setaf 5)
export TPTDCYAN=$(tput setaf 6)
export TPTDWHITE=$(tput setaf 7)
export TPTBLACK=$(tput setaf 8)
export TPTRED=$(tput setaf 9)
export TPTGREEN=$(tput setaf 10)
export TPTYELLOW=$(tput setaf 11)
export TPTBLUE=$(tput setaf 12)
export TPTPURPLE=$(tput setaf 13)
export TPTCYAN=$(tput setaf 14)
export TPTWHITE=$(tput setaf 15)

# font effect :: using ANSI escape code - SGR(select graphic rendition) parameters
# <Effect>      <code>
# Reset/Normal   0          
# Bold           1
# Faint          2
# Italics        3
# Underlined     4
# Blink          5
# <Color>       <fg> <bg>
# BLACK          30   40
# RED            31   41
# GREEN          32   42
# YELLOW         33   43
# BLUE           34   44
# PURPLE         35   45
# CYAN           36   46
# WHITE          37   47
# <Bright Color> <fg> <bg>
# BLACK           90  100
# RED             91  101
# GREEN           92  102
# YELLOW          93  103
# BLUE            94  104
# PURPLE          95  105
# CYAN            96  106
# WHITE           97  107


# available tool: sed awk 
# format:
# \o033[<sgr-param;...>m
# example$ echo red | sed -u -e "s/\(red\)/\o033[1;31m\1\o033[0;m/gi"
# example$ echo red | sed -u -e "s/\(red\)/${ANCRED}\1${ANCNORM}/gi"
export ANCTYPENORM="\o033[0;"
export ANCTYPEBOLD="\o033[1;"
export ANCTYPEITAL="\o033[3;"
export ANCTYPEUNDL="\o033[4;"
export ANCTYPEBLNK="\o033[5;"
export ANCTYPEBOLUND="\o033[1;4;"
export ANCBLACK="${ANCTYPEBOLD}30m"
export ANCRED="${ANCTYPEBOLD}31m"
export ANCREDCRIT="${ANCTYPEBOLUND}31m"
export ANCGREEN="${ANCTYPEBOLD}32m"
export ANCYELLOW="${ANCTYPEBOLD}33m"
export ANCBLUE="${ANCTYPEBOLD}34m"
export ANCMAGENTA="${ANCTYPEBOLD}35m"
export ANCCYAN="${ANCTYPEBOLD}36m"
export ANCWHITE="${ANCTYPEBOLD}37m"
export ANCNORM="${ANCTYPEBOLD}m"


# available tool: echo print
# format:
# \033[<sgr-param;...>m
# \e[<sgr-param;...>m
# example$ echo '\033[1;4;31m red \033[0m'
# example$ echo '\e[1;4;31m red \e[0m'
# example$ print '\033[1;4;31m red \033[0m'
# example$ print '\e[1;4;31m red \e[0m'
# example$ echo "${ANCERED} red ${ANCENORM}"
export ANCETYPENORM="\e[0;"
export ANCETYPEBOLD="\e[1;"
export ANCETYPEITAL="\e[3;"
export ANCETYPEUNDL="\e[4;"
export ANCETYPEBLNK="\e[5;"
export ANCETYPEBOLUND="\e[1;4;"
export ANCEBLACK="${ANCETYPEBOLD}30m"
export ANCERED="${ANCETYPEBOLD}31m"
export ANCEREDCRIT="${ANCETYPEBOLUND}31m"
export ANCEGREEN="${ANCETYPEBOLD}32m"
export ANCEYELLOW="${ANCETYPEBOLD}33m"
export ANCEBLUE="${ANCETYPEBOLD}34m"
export ANCEMAGENTA="${ANCETYPEBOLD}35m"
export ANCECYAN="${ANCETYPEBOLD}36m"
export ANCEWHITE="${ANCETYPEBOLD}37m"
export ANCENORM="${ANCETYPEBOLD}m"

colortest-style() {
  echo "terminal info: $(tput longname)"
  echo "terminal colors: $(tput colors)"
  echo

  echo "0: normal, reset"
  echo "1: bold, increased intensity"
  echo "2: faint, dim, decreased intensity "
  echo "3: italic"
  echo "4: underline"
  echo "5: slow blink"
  echo "6: rapid blink"
  echo "7: invert, reverse video"
  echo "8: hide, concesl"
  echo "9: strike, crossed-out"
  echo

  for style in {0..9}; do
    printf "\033[${style};36;47mstyle(${style})\033[0m ";
    echo
  done
}

colortest-3bit() {
  echo "terminal info: $(tput longname)"
  echo "terminal colors: $(tput colors)"
  echo

  for fg in {30..37}; do
    for bg in {40..47}; do
      printf "\033[${fg};${bg}mf:${fg},b:${bg}\033[0m ";
    done
    echo
  done
  echo

  for fg in {90..97}; do
    for bg in {40..47}; do
      printf "\033[${fg};${bg}mf:${fg},b:${bg}\033[0m ";
    done
    echo
  done
  echo
  
  for fg in {30..37}; do
    for bg in {100..107}; do
      printf "\033[${fg};${bg}mf:${fg},b:${bg}\033[0m ";
    done
    echo
  done
  echo
  
  for fg in {90..97}; do
    for bg in {100..107}; do
      printf "\033[${fg};${bg}mf:${fg},b:${bg}\033[0m ";
    done
    echo
  done
  echo
}

colortest-8bit() {
  echo "terminal info: $(tput longname)"
  echo "terminal colors: $(tput colors)"
  echo

  echo "foreground:"
  for fgcolor in {1..15};do
    printf "\e[38;5;${fgcolor}m%5d\033[0m" ${fgcolor}
  done
  echo

  for fgcolor in {16..231};do
    if [[ (${fgcolor} -ne 16) && ($((${fgcolor}%6)) -eq 4) ]];then echo ""; fi
    printf "\e[38;5;${fgcolor}m%5d\033[0m" ${fgcolor}
  done
  echo

  for fgcolor in {232..255};do
    printf "\e[38;5;${fgcolor}m%5d\033[0m" ${fgcolor}
  done
  echo
  echo

  echo "background:"
  for bgcolor in {1..15};do
    printf "\e[48;5;${bgcolor}m%5d\033[0m" ${bgcolor}
  done
  echo

  for bgcolor in {16..231};do
    if [[ (${bgcolor} -ne 16) && ($((${bgcolor}%6)) -eq 4) ]];then echo ""; fi
    printf "\e[48;5;${bgcolor}m%5d\033[0m" ${bgcolor}
  done
  echo

  for bgcolor in {232..255};do
    printf "\e[48;5;${bgcolor}m%5d\033[0m" ${bgcolor}
  done
  echo
  echo
  
  echo "combination:"
  print "\e[38;5;196;48;5;21m combination \033[0m"
}

colortest-tput-8bit() {
  echo "terminal info: $(tput longname)"
  echo "terminal colors: $(tput colors)"
  echo

  echo "foreground:"
  for color in {1..15};do
    printf  "$(tput setaf ${color})%5d$(tput sgr0)" ${color}
  done
  echo

  for color in {16..231};do
    if [[ (${color} -ne 16) && ($((${color}%6)) -eq 4) ]];then echo ""; fi
    printf  "$(tput setaf ${color})%5d$(tput sgr0)" ${color}
  done
  echo

  for color in {232..255};do
    printf  "$(tput setaf ${color})%5d$(tput sgr0)" ${color}
  done
  echo
  echo

  echo "background:"
  for color in {1..15};do
    printf  "$(tput setab ${color})%5d$(tput sgr0)" ${color}
  done
  echo

  for color in {16..231};do
    if [[ (${color} -ne 16) && ($((${color}%6)) -eq 4) ]];then echo ""; fi
    printf  "$(tput setab ${color})%5d$(tput sgr0)" ${color}
  done
  echo

  for color in {232..255};do
    printf  "$(tput setab ${color})%5d$(tput sgr0)" ${color}
  done
  echo
  echo

  echo "combination:"
  print "$(tput setaf 196 setab 21) combination $(tput sgr0)"
}



#####################
## proxy 
#####################
[[ -z $(ss -tulnp | fgrep :9913) ]] && \
  ssh -fCN -L 9913:192.168.10.1:34253 testpub.nat.proxy \
    -o ServerAliveCountMax=10 \
    -o ServerAliveInterval=60 \
    -o ExitOnForwardFailure=yes \
    -o TCPKeepAlive=no \
    &>/dev/null


#####################
## configuration for VcXsrv(xorg server) to run terminator using WSL through x11 server
#####################

if [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
# set DISPLAY to use X terminal in WSL
    WSL_WINDOWS_HOST_IPADDR=$(awk '/nameserver / {print $2; exit;}' /etc/resolv.conf 2>/dev/null)
    export DISPLAY=$WSL_WINDOWS_HOST_IPADDR:0.0
    export PULSE_SERVER=tcp:$WSL_WINDOWS_HOST_IPADDR
    export LIBGL_ALWAYS_INDIRECT=1
else
# normal LINUX
    export DISPLAY=:1
fi


#################################
# ssh
#################################
# ssh root@1.2.3.4  ${sshalive}
sshalive='-o ServerAliveCountMax=10 -o ServerAliveInterval=60'


#################################
# k8s
#################################
# kubectl create pod -name mypod  ${kdo}
kdo='--dry-run=client -o yaml'

# minikube autocompletion
if type minikube &>/dev/null; then
    source <(minikube completion zsh)
fi

# kubectl autocompletion
# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
if type kubectl &>/dev/null; then
    source <(kubectl completion zsh)
    export kdo='--dry-run=client -o yaml'
fi


# helm autocompletion
# https://helm.sh/docs/helm/helm_completion_zsh/
if type helm &>/dev/null; then
    source <(helm completion zsh)
fi



#################################
# ENV PATH
#################################
## ANDROID PATH
# export SHELL="/bin/bash"
export LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/lib:/usr/local/include
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/lib:/usr/local/include


#################################
# SHELL PATH
#################################
## ANDROID PATH
# ANDROID_HOME=$HOME/sw/dev/env/android/sdk
# ANDROID_PlATFORM_TOOLS=${ANDROID_HOME}/platform-tools
# ANDROID_BUILD_TOOLS=${ANDROID_HOME}/build-tools/28.0.0-rc1
# PATH="${PATH}:${ANDROID_PlATFORM_TOOLS}:${ANDROID_BUILD_TOOLS}"


## USER's Private BIN PATH
if [[ -d "$HOME/bin" ]]; then
    export PATH="$HOME/bin:$PATH"
fi

if [[ -d "$HOME/.local/bin" ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

## GO PATH
if [[ -d /opt/go/bin ]]; then
    export PATH="$PATH:/opt/go/bin"
fi

if [[ -d /usr/local/go/bin ]]; then
    export PATH="$PATH:/usr/local/go/bin"
fi

if [[ -d $HOME/go/bin ]]; then
    export PATH="$PATH:$HOME/go/bin"
fi

if [[ -d $HOME/go/gopath-head/bin ]]; then
    export PATH="$PATH:$HOME/go/gopath-head/bin"
fi

## JAVA PATH
temp="/opt/jdk/jdk-17.0.2"
if [[ -d $temp ]]; then
    export JDK_HOME=$temp
    export JAVA_HOME=${JDK_HOME}
    export CLASSPATH=.:${JAVA_HOME}/lib
    export PATH=$PATH:${JAVA_HOME}/bin
fi

## MAVEN PATH
temp="/opt/mvn/apache-maven-3.9.3"
if [[ -d $temp ]]; then
    export MAVEN_HOME=$temp
    export M2HOME=${MAVEN_HOME}
    export PATH=$PATH:${M2_HOME}/bin
fi

## GRADLE PATH
temp="/opt/gradle/gradle-8.6"
if [[ -d $temp ]]; then
  export GRADLE_HOME=$temp
  export PATH=$PATH:${GRADLE_HOME}/bin
fi

## Obsidian valut PATH
temp="/mnt/c/Users/$(id -un)/Obsidian/vaults/devlog"
if [[ -d $temp ]]; then
  export OBSIDIAN_VAULT_PATH=$temp
fi

# set DOCKER_HOST for docker default context
# wsl_ip=$(ip addr show eth0 | grep -oP "(?<=inet\s)\d+(\.\d+){3}")
# export DOCKER_HOST=tcp://$wsl_ip:2375


